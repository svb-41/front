{
  "torpedo": "import {\n  ControllerArgs,\n  Ship,\n  RadarResult,\n  Position,\n  helpers,\n} from '@starships-core'\n\nconst getInstruction = ({\n  stats,\n  radar,\n  memory,\n  ship,\n  comm,\n}: ControllerArgs) => {\n  const messages = comm.getNewMessages()\n  if (radar.length > 0) {\n    const closeEnemy = radar\n      .filter((res: RadarResult) => res.team !== stats.team && !res.destroyed)\n      .map((res: RadarResult) => ({\n        res,\n        dist: helpers.dist2(res.position, stats.position),\n      }))\n    if (closeEnemy.length > 0) {\n      const nearestEnemy = closeEnemy.reduce((acc, val) =>\n        acc.dist > val.dist ? val : acc\n      )\n      if (nearestEnemy) {\n        const target = helpers.trigo.nextPosition(\n          Math.sqrt(nearestEnemy.dist) / 0.6\n        )(nearestEnemy.res.position)\n        return ship.fire(stats.weapons[0].coolDown === 0 ? 0 : 1, {\n          target: target.pos,\n          armedTime: nearestEnemy.dist - 100,\n        })\n      }\n    }\n  }\n  if (messages.length > 0) {\n    const targets = messages\n      .map(m => m.content.message.map((res: any) => res))\n      .reduce((acc, val) => [...acc, ...val]) as Array<Position>\n    memory.targets = targets\n  }\n  if (memory.targets.length > 0 && stats.weapons[1].coolDown === 0) {\n    const target = helpers.trigo.nextPosition(200)(memory.targets.pop())\n\n    const d = Math.sqrt(helpers.dist2(stats.position, target))\n    return ship.fire(1, { target: target.pos, armedTime: d - 100 })\n  }\n\n  return ship.idle()\n}\nthis.default = getInstruction\n",
  "scout": "import {\n  ControllerArgs,\n  Ship,\n  RadarResult,\n  helpers,\n} from '@starships-core'\n\nconst getInstruction = ({\n  stats,\n  memory,\n  comm,\n  radar,\n  ship,\n}: ControllerArgs) => {\n  if (!memory.initialDir) memory.initialDir = stats.position.direction\n  if (stats.position.speed < 0.08) return ship.thrust()\n  if (radar.length > 0) {\n    const enemies = radar\n      .filter(res => res.team !== stats.team && !res.destroyed)\n      .map(res => res.position)\n    if (enemies.length > 0) comm.sendMessage(enemies)\n    const importantTarget = radar\n      .filter(res => res.team !== stats.team && !res.destroyed)\n      .find(enemy => enemy.size === 16)\n    if (importantTarget) {\n      const targetDist = helpers.dist2(\n        stats.position,\n        importantTarget.position\n      )\n      return helpers.trigo.aim({\n        ship,\n        source: stats.position,\n        target: importantTarget!.position,\n        threshold: 4 / Math.sqrt(targetDist),\n        delay:\n          Math.sqrt(targetDist) / stats.weapons[0]?.bullet.position.speed,\n      })\n    }\n  }\n  if (memory.initialDir - stats.position.direction === 0) return ship.idle()\n  return ship.turn(memory.initialDir - stats.position.direction)\n}\n\nthis.default = getInstruction\n",
  "mine": "import {\n  ControllerArgs,\n  Ship,\n  RadarResult,\n  helpers,\n} from '@starships-core'\n\nconst getInstruction = ({ stats, radar, memory, ship }: ControllerArgs) => {\n  if (radar.length > 0) {\n    const closeEnemy = radar\n      .filter((res: RadarResult) => res.team !== stats.team && !res.destroyed)\n      .map((res: RadarResult) => ({\n        res,\n        dist: helpers.dist2(res.position, stats.position),\n      }))\n    if (closeEnemy.length > 0) {\n      const nearestEnemy = closeEnemy.reduce((acc, val) =>\n        acc.dist > val.dist ? val : acc\n      )\n      if (nearestEnemy) {\n        const target = helpers.trigo.nextPosition(\n          Math.sqrt(nearestEnemy.dist) / 0.6\n        )(nearestEnemy.res.position)\n        return ship.fire(stats.weapons[0].coolDown === 0 ? 0 : 1, {\n          target: target.pos,\n          armedTime: nearestEnemy.dist - 100,\n        })\n      }\n    }\n  }\n  if (stats.weapons[2].coolDown === 0 && memory.targets.length > 0) {\n    return ship.fire(2, { target: memory.targets.pop(), armedTime: 500 })\n  }\n  return ship.idle()\n}\nthis.default = getInstruction\n",
  "hold": "import {\n  ControllerArgs,\n  Ship,\n  RadarResult,\n  helpers,\n} from '@starships-core'\n\nconst getInstruction = ({ stats, radar, memory, ship }: ControllerArgs) => {\n  const ally = radar.find(\n    (res: RadarResult) =>\n      res.team === stats.team &&\n      Math.abs(\n        helpers.trigo.angle({\n          source: stats.position,\n          target: helpers.trigo.nextPosition(200)(res.position),\n        }) - stats.position.direction\n      ) < 0.1\n  )\n\n  const closeEnemy = radar\n    .filter((res: RadarResult) => res.team !== stats.team && !res.destroyed)\n    .map((res: RadarResult) => ({\n      res,\n      dist: helpers.dist2(res.position, stats.position),\n    }))\n  if (closeEnemy.length > 0) {\n    const nearestEnemy = closeEnemy.reduce((acc, val) =>\n      acc.dist > val.dist ? val : acc\n    )\n\n    const resAim = helpers.trigo.aim({\n      ship,\n      source: stats.position,\n      target: nearestEnemy.res.position,\n      threshold: 1 / Math.sqrt(nearestEnemy.dist),\n      delay:\n        Math.sqrt(nearestEnemy.dist) / stats.weapons[0].bullet.position.speed,\n    })\n    if (resAim === ship.fire() && ally) return ship.idle()\n    return resAim\n  }\n\n  return ship.idle()\n}\n\nthis.default = getInstruction\n",
  "assault": "import {\n  ControllerArgs,\n  Ship,\n  RadarResult,\n  helpers,\n} from '@starships-core'\n\nconst getInstruction = ({ stats, radar, memory, ship }: ControllerArgs) => {\n  if (!memory.initialDir) memory.initialDir = stats.position.direction\n  if (stats.position.speed < 0.1) return ship.thrust()\n\n  const ally = radar.find(\n    (res: RadarResult) =>\n      res.team === stats.team &&\n      Math.abs(\n        helpers.trigo.angle({\n          source: stats.position,\n          target: helpers.trigo.nextPosition(200)(res.position),\n        }) - stats.position.direction\n      ) < 0.1\n  )\n  const closeEnemy = radar\n    .filter((res: RadarResult) => res.team !== stats.team && !res.destroyed)\n    .map((res: RadarResult) => ({\n      res,\n      dist: helpers.dist2(res.position, stats.position),\n    }))\n  if (closeEnemy.length > 0) {\n    const nearestEnemy = closeEnemy.reduce((acc, val) =>\n      acc.dist > val.dist ? val : acc\n    )\n\n    const resAim = helpers.trigo.aim({\n      ship,\n      source: stats.position,\n      target: nearestEnemy.res.position,\n      threshold: 4 / Math.sqrt(nearestEnemy.dist),\n      delay:\n        Math.sqrt(nearestEnemy.dist) /\n        stats.weapons[0]?.bullet.position.speed,\n    })\n    if (resAim.constructor.name === 'Fire' && ally) return ship.idle()\n    return resAim\n  }\n\n  if (memory.initialDir - stats.position.direction)\n    return ship.turn(memory.initialDir - stats.position.direction)\n  return ship.idle()\n}\n\nthis.default = getInstruction\n"
}
