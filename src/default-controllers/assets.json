{"assault":"import * as svb from '@svb-41/core'\nconst { dist2 } = svb.geometry\n\ntype Data = { initialDir?: number }\nconst weaponType = (stats: svb.ship.Ship) => {\n  const weapon = stats.weapons\n    .map((w, i) => ({ w, i }))\n    .find(({ w }) => w.coolDown === 0 && w.amo > 0)\n  if (weapon) return weapon.i\n  return 0\n}\n\nexport const data: Data = {}\nexport const ai: svb.AI<Data> = ({ stats, radar, memory, ship }) => {\n  if (!memory.initialDir) memory.initialDir = stats.position.direction\n  if (stats.position.speed < 0.1) return ship.thrust()\n\n  const ally = radar.find(res => {\n    const isSameTeam = res.team === stats.team\n    if (!isSameTeam) return false\n    const source = stats.position\n    const target = svb.geometry.nextPosition(200)(res.position)\n    const finalAngle = svb.geometry.angle({ source, target })\n    const direction = finalAngle - stats.position.direction\n    return Math.abs(direction) < 0.1\n  })\n\n  const near = svb.radar.nearestEnemy(radar, stats.team, stats.position)\n  if (near) {\n    const source = stats.position\n    const target = near.enemy.position\n    const threshold = 4 / Math.sqrt(near.dist2)\n    const speed = stats.weapons[0]?.bullet.position.speed\n    const delay = Math.sqrt(near.dist2) / speed\n    const resAim = svb.geometry.aim({\n      ship,\n      source,\n      target,\n      threshold,\n      delay,\n      weapon: weaponType(stats),\n    })\n    if (resAim.id === svb.Instruction.FIRE && ally) return ship.idle()\n    return resAim\n  }\n\n  const { direction } = stats.position\n  if (memory.initialDir - direction)\n    return ship.turn(memory.initialDir - direction)\n  return ship.idle()\n}\n","hold":"import * as svb from '@svb-41/core'\n\ntype Data = {}\n\nexport const data: Data = {}\nexport const ai: svb.AI<Data> = ({ stats, radar, ship }) => {\n  const ally = radar.find(res => {\n    const isSameTeam = res.team === stats.team\n    if (!isSameTeam) return false\n    const source = stats.position\n    const target = svb.geometry.nextPosition(200)(res.position)\n    const finalAngle = svb.geometry.angle({ source, target })\n    const direction = finalAngle - stats.position.direction\n    return Math.abs(direction) < 0.1\n  })\n\n  const near = svb.radar.nearestEnemy(radar, stats.team, stats.position)\n  if (near) {\n    const source = stats.position\n    const target = near.enemy.position\n    const threshold = 1 / Math.sqrt(near.dist2)\n    const speed = stats.weapons[0].bullet.position.speed\n    const delay = Math.sqrt(near.dist2) / speed\n    const resAim = svb.geometry.aim({ ship, source, target, threshold, delay })\n    if (resAim.id === svb.Instruction.FIRE && ally) return ship.idle()\n    return resAim\n  }\n\n  return ship.idle()\n}\n","mine":"import * as svb from '@svb-41/core'\n\ntype Data = { targets: Array<{ x: number; y: number }> }\n\nconst t = (x: number, y: number) => ({ x, y })\nconst targets = [t(500, 300), t(500, 500), t(500, 700), t(500, 700)]\n\nexport const data: Data = { targets }\nexport const ai: svb.AI<Data> = ({ stats, radar, memory, ship }) => {\n  if (radar.length > 0) {\n    const near = svb.radar.nearestEnemy(radar, stats.team, stats.position)\n    if (near) {\n      const dist = Math.sqrt(near.dist2) / 0.6\n      const target = svb.geometry.nextPosition(dist)(near.enemy.position)\n      return ship.fire(stats.weapons[0].coolDown === 0 ? 0 : 1, {\n        target: target.pos,\n        armedTime: near.dist2 - 100,\n      })\n    }\n  }\n  if (stats.weapons[2].coolDown === 0 && memory.targets.length > 0)\n    return ship.fire(2, { target: memory.targets.pop(), armedTime: 500 })\n  return ship.idle()\n}\n","scout":"import * as svb from '@svb-41/core'\n\ntype Data = { initialDir?: number }\n\nexport const data: Data = {}\nexport const ai: svb.AI<Data> = ({ stats, comm, radar, ship }) => {\n  if (radar.length > 0) {\n    const enemies = radar\n      .filter(res => res.team !== stats.team && !res.destroyed)\n      .map(res => res.position)\n    if (enemies.length > 0) comm.sendMessage(enemies)\n  }\n  const { speed } = stats.position\n  if (speed < 0.1) return ship.thrust(0.1 - speed)\n  if (speed - 0.1 >= 0.01) return ship.thrust(speed - 0.1)\n  return ship.idle()\n}\n","torpedo":"import * as svb from '@svb-41/core'\nconst { dist2 } = svb.geometry\n\ntype Position = svb.ship.Position\ntype Data = { targets: Array<Position> }\n\nexport const data: Data = { targets: [] }\nexport const ai: svb.AI<Data> = ({ stats, radar, memory, ship, comm }) => {\n  const messages = comm.messagesSince(0)\n  const near = svb.radar.nearestEnemy(radar, stats.team, stats.position)\n  if (near) {\n    const dist = Math.sqrt(near.dist2) / 0.6\n    const target = svb.geometry.nextPosition(dist)(near.enemy.position)\n    return ship.fire(stats.weapons[0].coolDown === 0 ? 0 : 1, {\n      target: target.pos,\n      armedTime: near.dist2 - 100,\n    })\n  }\n\n  if (messages.length > 0) {\n    const targets: Array<Position> = messages\n      .map(m => m.content.message.map((res: any) => res))\n      .reduce((acc, val) => [...acc, ...val])\n    memory.targets = targets\n  }\n\n  if (memory.targets.length > 0 && stats.weapons[1].coolDown === 0) {\n    const target = svb.geometry.nextPosition(200)(memory.targets.pop()!)\n    const d = Math.sqrt(dist2(stats.position, target))\n    return ship.fire(1, { target: target.pos, armedTime: d - 100 })\n  }\n\n  return ship.idle()\n}\n"}