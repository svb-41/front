{"assault":"import * as svb from '@svb-41/core'\n\nexport type Data = {}\nexport const initialData = {}\n\nexport default ({ stats, radar, memory, ship }: svb.controller.ControllerArgs<Data>) => {\n  const ally = radar.find(rad => {\n    const isSameTeam = rad.team === stats.team\n    if (!isSameTeam) return false\n    const source = stats.position\n    const target = svb.helpers.nextPosition(200)(rad.position)\n    const newAngle = svb.helpers.angle({ source, target }) - stats.position.direction\n    return Math.abs(newAngle) < 0.1\n  })\n\n  const closeEnemy = radar\n    .filter(res => res.team !== stats.team && !res.destroyed)\n    .map(res => ({ res, dist: svb.helpers.dist2(res.position, stats.position) }))\n\n  if (closeEnemy.length > 0) {\n    const nearestEnemy = closeEnemy.reduce((acc, val) => acc.dist > val.dist ? val : acc)\n    const source = stats.position\n    const target = nearestEnemy.res.position\n    const threshold = 1 / Math.sqrt(nearestEnemy.dist)\n    const delay = Math.sqrt(nearestEnemy.dist) / stats.weapons[0].bullet.position.speed\n    const resAim = svb.helpers.aim({ ship, source, target, threshold, delay })\n    if (resAim === ship.fire() && ally) return ship.idle()\n    return resAim\n  }\n\n  return ship.idle()\n}\n","hold":"import * as svb from '@svb-41/core'\n\nexport type Data = {}\nexport const initialData = {}\n\nexport default ({ stats, radar, memory, ship }: svb.controller.ControllerArgs<Data>) => {\n  const ally = radar.find(rad => {\n    const isSameTeam = rad.team === stats.team\n    if (!isSameTeam) return false\n    const source = stats.position\n    const target = svb.helpers.nextPosition(200)(rad.position)\n    const newAngle = svb.helpers.angle({ source, target }) - stats.position.direction\n    return Math.abs(newAngle) < 0.1\n  })\n\n  const closeEnemy = radar\n    .filter(res => res.team !== stats.team && !res.destroyed)\n    .map(res => ({ res, dist: svb.helpers.dist2(res.position, stats.position) }))\n\n  if (closeEnemy.length > 0) {\n    const nearestEnemy = closeEnemy.reduce((acc, val) => acc.dist > val.dist ? val : acc)\n    const source = stats.position\n    const target = nearestEnemy.res.position\n    const threshold = 1 / Math.sqrt(nearestEnemy.dist)\n    const delay = Math.sqrt(nearestEnemy.dist) / stats.weapons[0].bullet.position.speed\n    const resAim = svb.helpers.aim({ ship, source, target, threshold, delay })\n    if (resAim === ship.fire() && ally) return ship.idle()\n    return resAim\n  }\n\n  return ship.idle()\n}\n","mine":"import * as svb from '@svb-41/core'\n\nexport type Data = {}\nexport const initialData = {}\n\nexport default ({ stats, radar, memory, ship }: svb.controller.ControllerArgs<Data>) => {\n  const ally = radar.find(rad => {\n    const isSameTeam = rad.team === stats.team\n    if (!isSameTeam) return false\n    const source = stats.position\n    const target = svb.helpers.nextPosition(200)(rad.position)\n    const newAngle = svb.helpers.angle({ source, target }) - stats.position.direction\n    return Math.abs(newAngle) < 0.1\n  })\n\n  const closeEnemy = radar\n    .filter(res => res.team !== stats.team && !res.destroyed)\n    .map(res => ({ res, dist: svb.helpers.dist2(res.position, stats.position) }))\n\n  if (closeEnemy.length > 0) {\n    const nearestEnemy = closeEnemy.reduce((acc, val) => acc.dist > val.dist ? val : acc)\n    const source = stats.position\n    const target = nearestEnemy.res.position\n    const threshold = 1 / Math.sqrt(nearestEnemy.dist)\n    const delay = Math.sqrt(nearestEnemy.dist) / stats.weapons[0].bullet.position.speed\n    const resAim = svb.helpers.aim({ ship, source, target, threshold, delay })\n    if (resAim === ship.fire() && ally) return ship.idle()\n    return resAim\n  }\n\n  return ship.idle()\n}\n","scout":"import * as svb from '@svb-41/core'\n\nexport type Data = {}\nexport const initialData = {}\n\nexport default ({ stats, radar, memory, ship }: svb.controller.ControllerArgs<Data>) => {\n  const ally = radar.find(rad => {\n    const isSameTeam = rad.team === stats.team\n    if (!isSameTeam) return false\n    const source = stats.position\n    const target = svb.helpers.nextPosition(200)(rad.position)\n    const newAngle = svb.helpers.angle({ source, target }) - stats.position.direction\n    return Math.abs(newAngle) < 0.1\n  })\n\n  const closeEnemy = radar\n    .filter(res => res.team !== stats.team && !res.destroyed)\n    .map(res => ({ res, dist: svb.helpers.dist2(res.position, stats.position) }))\n\n  if (closeEnemy.length > 0) {\n    const nearestEnemy = closeEnemy.reduce((acc, val) => acc.dist > val.dist ? val : acc)\n    const source = stats.position\n    const target = nearestEnemy.res.position\n    const threshold = 1 / Math.sqrt(nearestEnemy.dist)\n    const delay = Math.sqrt(nearestEnemy.dist) / stats.weapons[0].bullet.position.speed\n    const resAim = svb.helpers.aim({ ship, source, target, threshold, delay })\n    if (resAim === ship.fire() && ally) return ship.idle()\n    return resAim\n  }\n\n  return ship.idle()\n}\n","torpedo":"import * as svb from '@svb-41/core'\n\nexport type Data = {}\nexport const initialData = {}\n\nexport default ({ stats, radar, memory, ship }: svb.controller.ControllerArgs<Data>) => {\n  const ally = radar.find(rad => {\n    const isSameTeam = rad.team === stats.team\n    if (!isSameTeam) return false\n    const source = stats.position\n    const target = svb.helpers.nextPosition(200)(rad.position)\n    const newAngle = svb.helpers.angle({ source, target }) - stats.position.direction\n    return Math.abs(newAngle) < 0.1\n  })\n\n  const closeEnemy = radar\n    .filter(res => res.team !== stats.team && !res.destroyed)\n    .map(res => ({ res, dist: svb.helpers.dist2(res.position, stats.position) }))\n\n  if (closeEnemy.length > 0) {\n    const nearestEnemy = closeEnemy.reduce((acc, val) => acc.dist > val.dist ? val : acc)\n    const source = stats.position\n    const target = nearestEnemy.res.position\n    const threshold = 1 / Math.sqrt(nearestEnemy.dist)\n    const delay = Math.sqrt(nearestEnemy.dist) / stats.weapons[0].bullet.position.speed\n    const resAim = svb.helpers.aim({ ship, source, target, threshold, delay })\n    if (resAim === ship.fire() && ally) return ship.idle()\n    return resAim\n  }\n\n  return ship.idle()\n}\n"}